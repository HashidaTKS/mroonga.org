.. highlightlang:: none

開発者向け情報
===============================

開発手法について
-------------------------------
groongaストレージエンジン開発プロジェクトではBTSの1つであるRedmineを用いたチケット駆動開発を実施しています。

Redmineは以下のサイトで運用されています。

http://redmine.groonga.org/projects/show/mroonga

開発の作業はチケット単位で行っています。

開発者の方は上記サイトへのアカウント登録をお願いします。

ロードマップについて
-------------------------------
ロードマップは以下のページで確認できます。基本的に開発はロードマップに沿って行います。

http://redmine.groonga.org/projects/mroonga/roadmap

ロードマップはオフラインあるいはオンラインでの開発会議で検討を行った上で決定されます。

ロードマップは各バージョンごとに追加する機能の一覧として構成されています。

ソースコード管理について
-------------------------------
githubを使用したgitによるソースコード管理を行っています。

http://github.com/mroonga/mroonga

上記レポジトリに対してread/writeでcloneを作成し、commitおよびpushして下さい。

アカウントを作成していない開発者の方はgithub.comへの登録をお願いします。

開発の流れについて
-------------------------------
開発は以下の流れで行いたいと考えています。

1. チケットの新規作成と内容の記述
2. 開発会議での検討(ロードマップへの反映)
3. チケットの割り当て(担当者作業開始)
4. 機能実装あるいはバグの修正作業
5. テストコードの追加と実行
6. 実装/テスト内容に対するレビュー
7. ドキュメントの追加/変更
8. チケットの完了

機能追加や仕様変更などについても積極的にアイデアを募集します。まずはチケットを新規作成して内容を記述して下さい。

レポジトリへのcommitおよびpushのタイミングは開発者の方にお任せしますが、チケットとの対応が後で分かるようにしておいて下さい。

テストコードの追加と実行については後述しますのでそちらを参照して下さい。

基本的にチケットを担当されている方が設計、実装、テスト、ドキュメントまで一通りお願いしたいと考えています。

他の開発者にレビューを依頼し(特に機能追加の場合)、無事パスしたら最後にドキュメントを追加/変更してチケット完了となります。

ドキュメントの追加/変更方法についても詳しくは後述します。

リリースについて
------------------------------
リリースはロードマップ上のチケットが全て完了となった段階で行います。

リリースにあたっては以下の作業を行っています。

* ソースパッケージ作成
* バイナリパッケージ作成
* ドキュメント(http://mroonga.github.com)のアップデート
* リリースの告知

開発環境
-------------------------------
現在、以下のような開発環境を想定しています。

* Linux x86_64
* glibc 2.5
* MySQL 5.1
* groonga 1.0
* cutter 1.1 (C/C++単体テスト用)
* sphinx 1.0 (ドキュメント用)

glibc 2.5はRed Hat Enterprise Linux 5に相当します。

ソースディレクトリ解説
------------------------------
今のところソースファイルの数はごくわずかです。なるべくシンプルな状態を維持したいと考えています。

ha_mroonga.h
 groongaストレージエンジンのヘッダファイル

ha_mroonga.cc
 groongaストレージエンジンの実装コード

mrnsys.h
 ユーティリティ関数のヘッダファイル

mrnsys.c
 ユーティリティ関数の実装コード

test/sql/
 SQLによるテストコード用ディレクトリ

test/sql/t/
 SQLテストスクリプト（現在実行可能なSQL文の定義も兼ねる）

test/sql/r/
 SQLテスト想定実行結果（SQL動作仕様定義も兼ねる）

test/unit/
 C/C++関数単体でのテストコード用ディレクトリ

doc/ja/
 sphinx形式のドキュメント一式

groongaストレージエンジンはまだ開発の立ち上げ段階であるため、SQL実行に関する仕様のドキュメント化は当面行いません。

その代わりとしてSQLテストスクリプトとその想定実行結果を機能一覧/仕様定義として見なしています。

テストコードの追加と実行について
--------------------------------
groongaストレージエンジンではプログラムの品質管理のため、2種類の回帰テストを用いています。

SQLテスト
 SQL実行により動作確認を行えるような機能追加/バグ修正に関しては必ずSQLテストを追加して下さい。高速化機能などは一見するとSQLによる動作確認ができないように見える場合もありますが、ステータス変数やinformation_schemaプラグインなどを使用することで上手くテストできるものもあります。

C/C++単体テスト
 cutterを使用した関数レベルでの回帰テストです。ユーティリティ関数などSQL実行結果による動作の差異を確認できないような実装を追加した場合にはこちらにテストを追加して下さい。

ソースコードレポジトリへのpushを行う前に必ず回帰テストを実行し、デグレードが発生していないことを確認して下さい。

上記の回帰テストは"make check"で双方とも呼び出されます。

SQLテストはMySQLの回帰テストである"mysql-test"に対する"sub test suite"として実装しています。テストケースの追加や想定結果ファイルの改変方法などの詳細情報は以下のMySQLのドキュメントを参照して下さい。

http://dev.mysql.com/doc/mysqltest/2.0/en/index.html

C/C++単体テストの書き方についてはcutterのドキュメントを参照して下さい。

http://cutter.sourceforge.net/index.html.ja

ドキュメントの追加と変更について
--------------------------------
groongaストレージエンジンではドキュメント作成にsphinxを使用しています。

ドキュメントはReStructuredText形式でソースファイルを書き、HTML形式などにビルドしています。

ドキュメントのソースファイルは"doc/ja/source"ディレクトリにある拡張子が.rstのファイルです。

加筆修正を行ったら"make html"等でビルドして下さい。

ドキュメントの公開場所は http://mroonga.github.com です。

githubのサイト機能を使用しているため http://github.com/mroonga/mroonga.github.com レポジトリに最新のHTML出力ファイルをpushすることで更新が行われます。

sphinxの出力するディレクトリ名がgithubで使用できない問題を回避するため、"doc/ja/source"ディレクトリにてsphinx2github.shスクリプトを用意しています。このスクリプトを実行した上でcommitおよびpushして下さい。
